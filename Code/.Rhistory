agenda_19 <- read_html("http://www.ft.dk/samling/20171/salen/19/index.htm")
#Get the points on the agenda
text_agenda_19 <- agenda_19 %>%
html_nodes(css = "#globalcontent_0_pagelayoutbcontent_2_tingdokcontent2_0_accordionConfigurableSpot span")
#Get the meta-info (the header) of the agenda
date_agenda_19 <- agenda_19 %>%
html_nodes(css = ".dayplanmetadata h1")
#Number of agenda items where the minister of immigration minister occurs
sum(str_detect(text_agenda_19, "dlændinge- og integrationsminister"))
#Get the date of the meeting
date_pattern<-"[:digit:]{1,2}\\.[:blank:][:lower:]+[:blank:][:digit:]{4}" #1 or 2 digits followed by dot followed by space, then one or more lowercase letters, then a space, and then exactly four digits
str_extract(date_agenda_19, pattern=date_pattern)
?ggsave
#I import the data
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Data")
url_agenda_df_plot<-readRDS("url_agenda_df.Rda")
#I make a label variable with the date of the meeting
url_agenda_df_plot$label<-url_agenda_df_plot$date
url_agenda_df_plot$label[url_agenda_df_plot$mentions<3]<-NA
url_agenda_df_plot$label<-format(url_agenda_df_plot$label, format="%b %d")
#Export the plot
plot1<-ggplot(url_agenda_df_plot, aes(x=date, y=mentions, label=label))+
geom_col(col="gray83")+
theme_classic()+
theme(axis.text.x = element_text(angle = 35, hjust = 1))+
labs(title="How many times does the minister of immigration occur on agenda (2017-18)")+
ylab("Number of mentions") +
xlab("")+
scale_x_date(date_labels = "%d %b %y", date_breaks = "month")+
geom_text_repel(size = 3)+
geom_rug()
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Results")
ggsave("which_sessions_are_relevant", plot=plot1)
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Results")
ggsave(filename="which_sessions_are_relevant.jpg", plot=plot1)
ggsave(filename="which_sessions_are_relevant.jpg",
plot=plot1,
width=10, height=7, units="cm")
ggsave(filename="which_sessions_are_relevant.jpg",
plot=plot1,
width=10, height=7, units="cm")
ggsave(filename="which_sessions_are_relevant.jpg",
plot=plot1,
width=20, height=14, units="cm")
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Results")
ggsave(filename="which_sessions_are_relevant.jpg",
plot=plot1,
width=18, height=12, units="cm")
knitr::opts_chunk$set(echo = TRUE)
library(httr) #To access and get data from the api
library(dplyr) #To clean up the new data data
library(rebus) #An intuitive guide to regular expressions
library(stringr) #To work with strings in a concise way
library(ggplot2) #For visualization
library(ggthemes) #For filling of plots
collect_ft_data <- function(url_basic, parameter_vector, max_obs, filter_equal=NULL, filter_contain=NULL){
### The following function collects data from the API of the Danish Parliament
### The function needs three inputs and returns a dataframe:
###     1) A URL provided by the API (www.http://oda.ft.dk/) with the data of interest (e.g.www.http://oda.ft.dk/api/Afstemning?$inlinecount=allpages).
###     2) A character vetor with the names of parameters you are interested in (e.g. c("id", "vedtage", "typeid")). The maximum number of variables is 15.
###     3) The number of observations you want to collect. Default is all observations.
###     4) A FILTER FOR THE SEARCH, CONTAINS VECTOR WITH c("attribute", "search.term")
#Making the filter into url, if one of them is specified
if (length(filter_equal)>1){
chr.filter <- c("&$filter=", URLencode(filter_equal[1], reserved=T),"%20eq%20",URLencode(filter_equal[2], reserved=T))
} else if (length(filter_contain)>1){
chr.filter <- c("&$filter=substringof('", URLencode(filter_contain[2], reserved=T),"',", URLencode(filter_contain[1], reserved=T),")")
} else {
chr.filter <- NULL
}
#Make the new filter URL
filter_url <- paste(chr.filter, collapse="")
#combine with entire URL
full_url <- paste0(url_basic, filter_url, collapse="")
# Making a GET-request
data_page <- GET(full_url)
data_content <- content(data_page)
num_obs <- data_content$odata.count
print(paste0("The dataset has ", num_obs, " observations"))
# Creating empty dataframe
df <- data.frame(NA) #Make dataset full of NA
for (i in parameter_vector){df[,i] <- NA} #Make a collumn for each parameter
df <- df[-1] #Removes first variable from empty df
# Setting the number of data observations that the function collects
if(missing(max_obs)) {
obs_collect <- num_obs #Default is all observation
} else {
obs_collect <- max_obs #Else the specified amount
}
# Collecting data with the selected variables and number of observations
seqnr <- seq(from=0, to=obs_collect, by=20) #How many searches must be made. Each page returns 20 obs
for(i in seqnr) {
link <- paste0(full_url,"&$skip=",i) #Skip = antal obs already taken
data.temp <- GET(link)
data.temp.content <- content(data.temp)
values = data.temp.content$value #Take only the values-element of the content-list
for(j in 1:length(values)) { #For every observation of the current page
df[i + j,] <- c(values[[j]][[parameter_vector[1]]], #Take this entire vector, with all the parameter values, and store it as the first obs in the data
values[[j]][[parameter_vector[2]]],
values[[j]][[parameter_vector[3]]],
values[[j]][[parameter_vector[4]]],
values[[j]][[parameter_vector[5]]],
values[[j]][[parameter_vector[6]]],
values[[j]][[parameter_vector[7]]],
values[[j]][[parameter_vector[8]]],
values[[j]][[parameter_vector[9]]],
values[[j]][[parameter_vector[10]]],
values[[j]][[parameter_vector[11]]],
values[[j]][[parameter_vector[12]]],
values[[j]][[parameter_vector[13]]],
values[[j]][[parameter_vector[14]]],
values[[j]][[parameter_vector[15]]])
}}
return(df)
}
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Data")
all_members_df<-readRDS("all_members_data_raw.Rda")
#I rename the variable from Danish to english
names(all_members_df)[names(all_members_df) == "navn"] <- "name"
#How many duplicated duplicates?
nrow(duplicated(all_members_df))
all_members_df$name[all_members_df$name=="Frank Aaen (udpeget af EL)"]<-"Frank Aaen"
all_members_df$name[all_members_df$name=="Simon Emil Ammitzbøll-Bille"]<-"Simon Emil Ammitzbøll"
str(all_members_df)
#I make a vector for every party abbreviation
party <- c("EL", "DF", "S", "LA", "RV", "V", "KF","ALT", "SF", #Danish Parties
"IA","T", "JF", "UFG", "SIU", "SP") #Greenlandic and Fairy Island Parties
#A search pattern in the members bio's, as all party abbreviations are in (XX)
party_pattern <- OPEN_PAREN %R% or1(party) %R% CLOSE_PAREN
#The I can extract member party
all_members_df$party<-stringr::str_extract(all_members_df$biografi, party_pattern)
#I extract the education from the membership biographies
all_members_df$education<-str_extract(all_members_df$biografi, "education>.{1,20},") #Take the first up to twenty characters after the "education>" end endning with a ","
all_members_df$education<-str_replace(all_members_df$education, "education>", "") #Remove the "education>"
all_members_df$education<-str_replace(all_members_df$education, "\\<education>", "")#Remove the "<education>"
all_members_df$education<-str_sub(all_members_df$education,1,-2L) #Remove the last comma
#144 unique values
unique(all_members_df$education)
#58 missing. No big worry - the education is not evident from the temporary members biography, why this is not so much of a problem
sum(is.na(all_members_df$education))
#If you have a university education in Denmark, your title is "cand.xxx.xxx". Further, some other university educations are evident
##Setting up a university pattern
university_pattern<-"Cand|h.d.|Antropolog|Statskundskab|Mag.|Dr.phil|Master"
##Counting the amoung of academics
sum(str_detect(all_members_df$education, pattern=university_pattern), na.rm=T)
##Making an academic variable
all_members_df$academic<-str_detect(all_members_df$education, pattern=university_pattern)
#Set up a fill variable
all_members_df$education_fill<-1:nrow(all_members_df)
all_members_df$education_fill[all_members_df$academic==T]<-"Academic Eduction"
all_members_df$education_fill[all_members_df$academic==F]<-"No Academic Eduction"
#Make the plot
plot1<-ggplot(subset(all_members_df, !is.na(academic) & !is.na(party)), aes(x=party, fill=education_fill))+
geom_bar()+
ylab("Number of parlament members") +
ylim(0,60)+
theme_minimal() +
labs(title="Danish MP's and their education?")+
theme(axis.text.y = element_text(size= 13),
axis.title.y = element_text(size= 13),
title=element_text(size=15),
axis.text.x=element_text(size=13),
axis.title.x=element_blank(),
legend.position = "top",
legend.title=element_blank(),
legend.text = element_text(size=13))+
scale_fill_ptol()
plot1
#Export the plot
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Results")
ggsave(filename="member_education_and_party.jpg",
plot=plot1,
width=18, height=12, units="cm")
#Set up a fill variable
all_members_df$education_fill<-1:nrow(all_members_df)
all_members_df$education_fill[all_members_df$academic==T]<-"Academic Eduction"
all_members_df$education_fill[all_members_df$academic==F]<-"No Academic Eduction"
#Make the plot
plot1<-ggplot(subset(all_members_df, !is.na(academic) & !is.na(party)), aes(x=party, fill=education_fill))+
geom_bar()+
ylab("Number of parlament members") +
ylim(0,60)+
theme_minimal() +
labs(title="Danish MP's and their education?")+
theme(axis.text.y = element_text(size= 13),
axis.title.y = element_text(size= 13),
title=element_text(size=15),
axis.text.x=element_text(size=11),
axis.title.x=element_blank(),
legend.position = "top",
legend.title=element_blank(),
legend.text = element_text(size=13))+
scale_fill_ptol()
plot1
#Export the plot
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Results")
ggsave(filename="member_education_and_party.jpg",
plot=plot1,
width=18, height=12, units="cm")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(stringr) #For working with string data
library(tm) # Framework for text mining
library(ggplot2) # for plotting word frequencies
library(dplyr)
library(RTextTools) # a machine learning package for text classification written in R
library(SnowballC) # for stemming
library(data.table)
library(wordcloud2) # for wordclouds
library(RColorBrewer) # for color palettes
library(matrixStats) # for statistics
library(ggplot2) #For plotting
#Open the data
getwd()
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Data")
immigration_debate_text_data<-readRDS("immigration_debate_text_data.Rda")
#A doc ID variable with party name and number of statement, so that I can sort
immigration_debate_text_data$doc_id <- paste0(immigration_debate_text_data$party, "_",
1:nrow(immigration_debate_text_data))
#The remove unctuation function further on does not remove » or «
sum(str_detect(immigration_debate_text_data$text, "«"))
sum(str_detect(immigration_debate_text_data$text, "»"))
immigration_debate_text_data$text<-str_replace_all(immigration_debate_text_data$text, pattern="«|»", "")
sum(str_detect(immigration_debate_text_data$text, "«"))
sum(str_detect(immigration_debate_text_data$text, "»"))
#Reorder the variables
immigration_debate_text_data<-select(immigration_debate_text_data, doc_id, text,name, time, party, academic)
#Check out the structure
str(immigration_debate_text_data)
#The DataframeSource() command allows me to import meta data
source<-DataframeSource(immigration_debate_text_data)
#Make the Corpus
text_corpus <- VCorpus(source)
#Inspect statement 1. The text corpus is a list - the first element is the content, the second is metadata
## Content of text 1
text_corpus[[1]][1]
## Metadata of text 1
meta(text_corpus[1])
#Metadata of text 1, name only
meta(text_corpus[1])$name
#I set up a vector of extra stopword
#Stowords before stemming
extra_stopwords_pre_stem<-c("formand","formanden", "kan", "ved", "spørgsmål", "folkeparti", "tak", "derfor")
#Stopwords after stemming
extra_stopwords_post_stem<-c("sig", "minist", "ordfør", "gør","regering","lovforslag","forslag")
#Party stopwords
party_stopwords<-c("Dansk Folkeparti", "Dansk Folkepartis",
"Socialdemokratiet","Socialdemokratiets",
"Venstre","Venstres",
"Konservativt Folkeparti","Konservativt Folkepartis",
"Alternativet", "Alternativets",
"Enhedslisten","Enhedslistens",
"Liberal Alliance", "Liberal Alliances",
"Radikale Venstre", "Radikale Venstres",
"Socialistisk Folkeparti", "Socialistisk Folkepartis")
##Member names stopword
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Data")
all_members_df<-readRDS("all_members_data.Rda")
member_first_last_name<-unlist(strsplit(all_members_df$name, " "))
#A clean corpus function
clean_corpus <- function(corpus){
corpus <- tm_map(corpus, removeWords, c(party_stopwords,member_first_last_name)) #Remove parties and members
corpus <- tm_map(corpus, content_transformer(tolower)) #Make everything lower case
corpus <- tm_map(corpus, removePunctuation) #Remove punctuation from the statements - does not remove » or «
corpus <- tm_map(corpus, removeNumbers) #Removes numbers from the data
corpus <- tm_map(corpus, removeWords, c(stopwords("da"),
extra_stopwords_pre_stem))
corpus <- tm_map(corpus, content_transformer(stemDocument), language = "danish") #Stem words
corpus <- tm_map(corpus, removeWords, c(stopwords("da"),
extra_stopwords_post_stem)) #Remove stopwords
corpus <- tm_map(corpus, stripWhitespace)
return(corpus)
}
#Use it on my corpus
clean_corp<-clean_corpus(text_corpus)
#Check it out
clean_corp[[1]][1]
text_corpus[[1]][1]
#Create matrix
dtm<-DocumentTermMatrix(clean_corp)
#Take a quick look
dim(dtm)
inspect(dtm[1:5,4500:4505])
#Make a term document matrix (words as rows)
tdm <- TermDocumentMatrix(clean_corp)
m <- as.matrix(tdm) #Make it into a matrix
v <- sort(rowSums(m),decreasing=TRUE) #Sort based on occurences
d <- data.frame(word = names(v),freq=v) #Make a dataframe of occurences
head(d, 5) #See the five most used words
#Set up a color vector
colorVec = colorRampPalette(c("#151A64", "#4292C6"))(nrow(d)) # creating automatically fading palette
#Make the wordcloud
set.seed(2345)
wordcloud2(data=d, rotateRatio = 0,
color = colorVec)
# turn DTM into dataframe
dtm.m <- as.data.frame(as.matrix(dtm))
#I have intuitive rownames
#sort(row.names(dtm.m))
#Now I sort after the row names, as these start with the party name
dtm.m.sort <- dtm.m[ order(row.names(dtm.m)), ]
#I ad a number indicator, to sort in the dataset
dtm.m.sort$NumberItem<-1:nrow(dtm.m.sort)
#And view the data
#View(dplyr::select(dtm.m.sort, NumberItem))
# Subset into a dtms for each party
dtm.alt <- dtm.m.sort[dtm.m.sort$NumberItem<44,]
dtm.df <- dtm.m.sort[dtm.m.sort$NumberItem>45 & dtm.m.sort$NumberItem<184,]
dtm.el <- dtm.m.sort[dtm.m.sort$NumberItem>185 & dtm.m.sort$NumberItem<263,]
dtm.kf <- dtm.m.sort[dtm.m.sort$NumberItem>264 & dtm.m.sort$NumberItem<310,]
dtm.la <- dtm.m.sort[dtm.m.sort$NumberItem>311 & dtm.m.sort$NumberItem<388,]
dtm.rv <- dtm.m.sort[dtm.m.sort$NumberItem>389 & dtm.m.sort$NumberItem<416,]
dtm.s <- dtm.m.sort[dtm.m.sort$NumberItem>417 & dtm.m.sort$NumberItem<553,]
dtm.sf <- dtm.m.sort[dtm.m.sort$NumberItem>554 & dtm.m.sort$NumberItem<594,]
dtm.v <- dtm.m.sort[dtm.m.sort$NumberItem>595 & dtm.m.sort$NumberItem<773,]
# Make one for government and leftwing
dtm.leftwing<-rbind(dtm.el,dtm.rv,dtm.sf,dtm.alt)
dtm.gov<-rbind(dtm.v,dtm.la,dtm.kf)
dtm.alt <- colSums(dtm.alt)
dtm.df <- colSums(dtm.df)
dtm.el <- colSums(dtm.el)
dtm.kf <- colSums(dtm.kf)
dtm.la <- colSums(dtm.la)
dtm.rv <- colSums(dtm.rv)
dtm.s <- colSums(dtm.s)
dtm.sf <- colSums(dtm.sf)
dtm.v <- colSums(dtm.v)
dtm.gov<-colSums(dtm.gov)
dtm.leftwing<-colSums(dtm.leftwing)
#Put them back in a dataframe for blocks
df_all_blocks <- data.frame(rbind(dtm.gov,
dtm.df,
dtm.s,
dtm.leftwing))
#And remove the number item
df_all_blocks<-dplyr::select(df_all_blocks, -NumberItem)
# Get words where one other parties usage is 0
solely_gov <- unlist(df_all_blocks[1,dtm.df==0 & dtm.s==0 & dtm.leftwing==0])
solely_gov<-solely_gov[order(solely_gov, decreasing = T)]
# Get words where one other parties usage is 0
solely_df <- unlist(df_all_blocks[2,dtm.gov==0 & dtm.s==0 & dtm.leftwing==0])
solely_df<-solely_df[order(solely_df, decreasing = T)]
# Get words where one other parties usage is 0
solely_s <- unlist(df_all_blocks[3,dtm.gov==0 & dtm.leftwing==0 & dtm.df==0])
solely_s<-solely_s[order(solely_s, decreasing = T)]
# Get words where one other parties usage is 0
solely_leftwing <- unlist(df_all_blocks[4,dtm.gov==0 & dtm.s==0 & dtm.df==0])
solely_leftwing<-solely_leftwing[order(solely_leftwing, decreasing = T)]
solely_gov[1:10]
solely_df[1:10]
solely_s[1:10]
solely_leftwing[1:10]
#Make a dataframe for plotting
df_plot<-as.data.frame(solely_df[1:10])
#Make a variable of the names
df_plot$names<-names(solely_df[1:10])
#Order the names after the times a word is used
df_plot$names <- factor(df_plot$names, levels = df_plot$names[order(-df_plot$solely_df[1:10])])
#Make the plot
df_barplot<- ggplot(df_plot, aes(x=names, y=solely_df[1:10]))+
geom_histogram(stat="identity")+
theme_minimal()+
theme(axis.text.x = element_text(angle = -20, hjust = 0, size= 11),
axis.title.x = element_blank())+
ylab("Number of words-uses")+
labs(title="Unique words, only used by Dansk Folkeparti")
#Make a dataframe for plotting
leftwing_plot<-as.data.frame(solely_leftwing[1:10])
#Make a variable of the names
leftwing_plot$names<-names(solely_leftwing[1:10])
#Order the names after the times a word is used
leftwing_plot$names <- factor(leftwing_plot$names, levels = leftwing_plot$names[order(-leftwing_plot$solely_leftwing[1:10])])
#Make the plot
leftwing_barplot<- ggplot(leftwing_plot, aes(x=names, y=solely_leftwing[1:10]))+
geom_histogram(stat="identity")+
theme_minimal()+
theme(axis.text.x = element_text(angle = -20, hjust = 0, size= 11),
axis.title.x = element_blank())+
ylab("Number of words-uses")+
labs(title="Unique words, only used by the Left wing opposition")
#Function I have used in other work earlier - it makes it possible to generate multiple ggplots next to oneanother via the grid-fucntion. Found on stack.overflow
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(df_barplot, leftwing_barplot)
# normalize into proportions
rowTotals <- rowSums(df_all_blocks) #create column with row totals, total number of words per document
head(rowTotals)
df_all_blocks <- df_all_blocks/rowTotals #change frequencies to proportions
df_all_blocks[,1:5] # how we have proportions.
# get difference in proportions
means.gov <- df_all_blocks[1,]
means.df <- df_all_blocks[2,]
means.s <- df_all_blocks[3,]
means.leftwing <- df_all_blocks[4,]
#Calculate the difference
score_gov_leftwing <- unlist(means.gov - means.leftwing) ##Government compared to leftwing
score_df_leftwing <- unlist(means.df - means.leftwing)##DF compared to leftwing
score_gov_df <- unlist(means.gov - means.df) ##Government compared to DF
# find words with highest difference
score_gov_leftwing <- sort(score_gov_leftwing, decreasing=T) #Government compared to the leftwing
head(score_gov_leftwing,10) # Top words for government
tail(score_gov_leftwing,10) # Top words for leftwin
#Make a dataframe for plotting
leftwing_gov_plot<-as.data.frame(score_gov_leftwing[c(1:10,5430:5439)])
#Make a variable of the names
leftwing_gov_plot$names<-names(score_gov_leftwing[c(1:10,5430:5439)])
#Rename
names(leftwing_gov_plot)[names(leftwing_gov_plot) == "score_gov_leftwing[c(1:10, 5430:5439)]"] <- "value"
#Order the names after the times a word is used
leftwing_gov_plot$names <- factor(leftwing_gov_plot$names, levels = leftwing_gov_plot$names[order(-leftwing_gov_plot$value)])
#Make the plot
plot1<-ggplot(leftwing_gov_plot, aes(x=names, y=value))+
geom_histogram(stat="identity")+
theme_minimal()+
coord_flip()+
theme(axis.text.y = element_text(size= 11),
axis.title.y = element_blank())+
ylab("Difference in proportion of words")+
labs(title="Leftwing vs. Government")+
theme(plot.title = element_text(hjust = 0.5))
plot1
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Results")
ggsave(filename="word_proportion_leftwing_government.jpg",
plot=plot1,
width=18, height=12, units="cm")
#Make a dataframe for plotting
leftwing_df_plot<-as.data.frame(score_df_leftwing[c(1:10,5430:5439)])
#Make a variable of the names
leftwing_df_plot$names<-names(score_df_leftwing[c(1:10,5430:5439)])
#Rename
names(leftwing_df_plot)[names(leftwing_df_plot) == "score_df_leftwing[c(1:10, 5430:5439)]"] <- "value"
#Order the names after the times a word is used
leftwing_df_plot$names <- factor(leftwing_df_plot$names, levels = leftwing_df_plot$names[order(-leftwing_df_plot$value)])
#Make the plot
plot2<-ggplot(leftwing_df_plot, aes(x=names, y=value))+
geom_histogram(stat="identity")+
theme_minimal()+
coord_flip()+
theme(axis.text.y = element_text(size= 11),
axis.title.y = element_blank())+
ylab("Difference in proportion of words")+
labs(title="Leftwing vs. Dansk Folkeparti")+
theme(plot.title = element_text(hjust = 0.5))
plot2
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Results")
ggsave(filename="word_proportion_leftwing_government.jpg",
plot=plot2,
width=18, height=12, units="cm")
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Results")
ggsave(filename="word_proportion_leftwing_dansk_folkeparti.jpg",
plot=plot2,
width=18, height=12, units="cm")
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Results")
ggsave(filename="word_proportion_leftwing_government.jpg",
plot=plot1,
width=18, height=12, units="cm")
plot2
plot1
score_df_leftwing[c(1:10,5430:5439)]
# find words with highest difference
score_df_leftwing <- sort(score_df_leftwing, decreasing=T) #Government compared to the leftwing
head(score_df_leftwing,10) # Top words for government
tail(score_df_leftwing,10) # Top words for leftwin
#Make a dataframe for plotting
leftwing_df_plot<-as.data.frame(score_df_leftwing[c(1:10,5430:5439)])
#Make a variable of the names
leftwing_df_plot$names<-names(score_df_leftwing[c(1:10,5430:5439)])
#Rename
names(leftwing_df_plot)[names(leftwing_df_plot) == "score_df_leftwing[c(1:10, 5430:5439)]"] <- "value"
#Order the names after the times a word is used
leftwing_df_plot$names <- factor(leftwing_df_plot$names, levels = leftwing_df_plot$names[order(-leftwing_df_plot$value)])
#Make the plot
plot2<-ggplot(leftwing_df_plot, aes(x=names, y=value))+
geom_histogram(stat="identity")+
theme_minimal()+
coord_flip()+
theme(axis.text.y = element_text(size= 11),
axis.title.y = element_blank())+
ylab("Difference in proportion of words")+
labs(title="Leftwing vs. Dansk Folkeparti")+
theme(plot.title = element_text(hjust = 0.5))
plot2
setwd("/Users/thorkilklint/Documents/Berkeley/PS239T_Computational/ps239T-final-project/Results")
ggsave(filename="word_proportion_leftwing_dansk_folkeparti.jpg",
plot=plot2,
width=18, height=12, units="cm")
